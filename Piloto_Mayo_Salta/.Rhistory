summary(model_lmer_4k)
anova(model_lmer_4k)
model_lmer_4k <- lmer(slope ~ as.factor(orden_bloque) + (1|nsub),
data = subset(slopes_4k_clean, slopes_4k_clean$condicion=="LL"))
model_lmer_4k <- lmer(slope ~ as.factor(orden_bloque) + (1|nsub),
data = filter(slopes_4k_clean, condicion=="LL"))
data_LL <- filter(slopes_4k_clean, condicion=="LL")
data_LL
data_LL <- filter(slopes_4k_clean, condicion=="LL")
model_lmer_4k <- lmer(slope ~ as.factor(orden_bloque) + (1|nsub),
data = data_LL)
View(data_LL)
data_LL <- filter(slopes_4k_clean, condicion=="LL")
model_lmer_4k <- lmer(slope ~ orden_bloque + (1|nsub),
data = data_LL)
data_LL <- filter(slopes_4k_clean, condicion=="LL")
model_lmer_4k <- lmer(slope ~ as.factor(orden_bloque),
data = data_LL)
data_LL <- filter(slopes_4k_clean, condicion=="LL")
aov_4k <- aov(slope ~ as.factor(orden_bloque),
data = data_LL)
# Get the summary of the model
summary(aov_4k)
anova(aov_4k)
emmeans(model_lmer_4k,
list(pairwise ~ condicion),
adjust="bonferroni")
# Fit a linear mixed-effects model with the
# interaction between "Order" and "condicion"
model_lmer_4k <- lmer(slope ~ condicion*as.factor(orden_bloque) + (1|nsub),
data = slopes_4k_clean)
# Get the summary of the model
summary(model_lmer_4k)
anova(model_lmer_4k)
emmeans(model_lmer_4k,
list(pairwise ~ condicion),
adjust="bonferroni")
emmeans(model_lmer_4k,
list(pairwise ~ orden_bloque),
adjust="bonferroni")
# ggplot(data=data_clean %>%
#          filter(freq=="4k"),
#        aes(x= dist_log,
#            y = resp_log,
#            colour = as.factor(nsub))) +
#   geom_smooth(aes(group=nsub),method="lm", se=FALSE)+
#   facet_wrap(~condicion)+
#   theme_minimal()
#
ggplot(data=data_slopes_clean %>%
filter(freq=="1k")) +
geom_abline(aes(intercept= intercept, slope= slope,
color= condicion))+
facet_wrap(~condicion)+
labs(title = "1kHz Slopes") +
scale_x_continuous(limits=c(0,2)) +
scale_y_continuous(limits=c(0,2)) +
theme_minimal()
ggplot(data=data_slopes_clean %>%
filter(freq=="4k")) +
geom_abline(aes(intercept= intercept, slope= slope,
color= condicion))+
facet_wrap(~condicion)+
labs(title = "4kHz Slopes") +
scale_x_continuous(limits=c(0,2)) +
scale_y_continuous(limits=c(0,2)) +
theme_minimal()
data_prom <- data_clean %>%
group_by(condicion, dist_log, freq) %>%
summarise(condicion,
distancia,
respuesta,
prom_lin = mean(respuesta),
sd_lin = sd(respuesta),
std_lin = std.error(respuesta),
dist_log,
resp_log,
prom_log = mean(resp_log),
sd_log = sd(resp_log),
std_log = std.error(resp_log),
freq)
G_Prom <- ggplot(data_prom,
aes(x=distancia, y=prom_lin,
color = condicion)) +
geom_point() +
geom_smooth(se = FALSE) +
# scale_x_log10() +
# scale_y_log10() +
geom_errorbar(aes(ymin=prom_lin-std_lin,
ymax=prom_lin+std_lin),
width = 0.2) +
# facet_grid(rows = vars(ID)) +
labs(title = paste0("Promedio y Barras de Error")) +
theme_minimal()
G_Prom
plt_1k_per_block <- ggplot(slopes_1k_clean,
aes(x=as.character(orden),
y=slope,
color=condicion)) +
geom_boxplot()+
#geom_point(position = "jitter")+
xlab("Bloque")+
ylab("Pendiente")+
labs(title="Pendientes por bloque 1k")+
theme_minimal()
plt_4k_per_block <- ggplot(slopes_4k_clean,
aes(x=as.character(orden),
y=slope,color=condicion)) +
geom_boxplot()+
#geom_point(position = "jitter")+
xlab("Bloque")+
ylab("Pendiente")+
labs(title="Pendientes por bloque  4k")+
theme_minimal()
ggarrange(plt_1k_per_block,plt_4k_per_block, common.legend = TRUE)
# ggplot(data=slopes_corregida%>%filter(freq=="1k"), aes(x=as.character(orden), y=slope,color=condicion))+
#   geom_boxplot()+
#   geom_point(position = "jitter")+
#   xlab("Bloque")+
#   ylab("Pendiente")+
#   theme_minimal()
plt_1k_per_block <- ggplot(slopes_1k_clean,
aes(x=as.character(orden_bloque),
y=slope,
color=condicion)) +
geom_boxplot()+
#geom_point(position = "jitter")+
xlab("Bloque")+
ylab("Pendiente")+
labs(title="Pendientes por bloque 1k")+
theme_minimal()
plt_4k_per_block <- ggplot(slopes_4k_clean,
aes(x=as.character(orden_bloque),
y=slope,color=condicion)) +
geom_boxplot()+
#geom_point(position = "jitter")+
xlab("Bloque")+
ylab("Pendiente")+
labs(title="Pendientes por bloque  4k")+
theme_minimal()
ggarrange(plt_1k_per_block,plt_4k_per_block, common.legend = TRUE)
plt_1k_per_block <- ggplot(slopes_1k_clean,
aes(x=as.character(orden_bloque),
y=slope,
color=condicion)) +
geom_boxplot()+
#geom_point(position = "jitter")+
xlab("Bloque")+
ylab("Pendiente")+
labs(title="Pendientes por bloque 1k")+
scale_y_continuous(limits=c(0,2)) +
theme_minimal()
plt_4k_per_block <- ggplot(slopes_4k_clean,
aes(x=as.character(orden_bloque),
y=slope,color=condicion)) +
geom_boxplot()+
#geom_point(position = "jitter")+
xlab("Bloque")+
ylab("Pendiente")+
labs(title="Pendientes por bloque  4k")+
scale_y_continuous(limits=c(0,2)) +
theme_minimal()
ggarrange(plt_1k_per_block,plt_4k_per_block, common.legend = TRUE)
# Fit a linear mixed-effects model with the
# interaction between "Order" and "condicion"
model_lmer_1k <- lmer(slope ~ condicion*as.factor(orden_bloque) + (1|nsub),
data = slopes_1k_clean)
# Get the summary of the model
summary(model_lmer_1k)
anova(model_lmer_1k)
emmeans(model_lmer_1k,
list(pairwise ~ condicion),
adjust="bonferroni")
emmeans(model_lmer_1k,
list(pairwise ~ orden_bloque),
adjust="bonferroni")
# Fit a linear mixed-effects model with the
# interaction between "Order" and "condicion"
model_lmer_4k <- lmer(slope ~ condicion*as.factor(orden_bloque) + (1|nsub),
data = slopes_4k_clean)
# Get the summary of the model
summary(model_lmer_4k)
anova(model_lmer_4k)
emmeans(model_lmer_4k,
list(pairwise ~ condicion),
adjust="bonferroni")
emmeans(model_lmer_4k,
list(pairwise ~ orden_bloque),
adjust="bonferroni")
emmeans(model_lmer_4k,
list(pairwise ~ condicion*order_bloque),
adjust="bonferroni")
emmeans(model_lmer_4k,
list(pairwise ~ condicion*orden_bloque),
adjust="bonferroni")
emmeans(model_lmer_4k,
list(pairwise ~ orden_bloque),
adjust="bonferroni")
emmeans(model_lmer_4k,
list(pairwise ~ condicion+orden_bloque),
adjust="bonferroni")
# emmeans(model_lmer_4k,
#         list(pairwise ~ orden_bloque),
#         adjust="bonferroni")
emmeans(model_lmer_4k,
list(pairwise ~ condicion+orden_bloque),
adjust="holm-bonferroni")
emmeans(model_lmer_4k,
list(pairwise ~ condicion),
adjust="bonferroni")
# emmeans(model_lmer_4k,
#         list(pairwise ~ orden_bloque),
#         adjust="bonferroni")
View(data_slopes_clean)
lmer.1k <- lmer(slope ~ condicion + (1|nsub),
data = slopes_1k_clean)
anova(lmer.1k)
##partial eta sq
effectsize::eta_squared(lmer.1k, partial = TRUE)
#Rsq
r.squaredGLMM(lmer.1k)
emmeans(lmer.1k,
list(pairwise ~ condicion),
adjust="bonferroni")
qqnorm(resid(lmer.1k))
lmer.1k <- lmer(slope ~ condicion + (1|nsub),
data = slopes_1k_clean)
anova(lmer.1k)
summary(lmer.1k)
lmer.1k <- lmer(slope ~ condicion + (1|nsub),
data = slopes_1k_clean)
summary(lmer.1k)
lm.1k<- lm(slope ~ condicion,
data = slopes_1k_clean)
summary(lm.1k)
lmer.1k <- lmer(slope ~ condicion + (1|nsub),
data = slopes_1k_clean)
anova(lmer.1k)
emmeans(lmer.1k,
list(pairwise ~ condicion),
adjust="bonferroni")
qqnorm(resid(lmer.1k))
lmer.4k <- lmer(slope ~ condicion + (1|nsub),
data = slopes_4k_clean)
anova(lmer.4k)
emmeans(lmer.4k,
list(pairwise ~ condicion),
adjust="bonferroni")
qqnorm(resid(lmer.4k))
# Fit a linear mixed-effects model with the
# interaction between "Order" and "condicion"
model_lmer_1k <- lmer(slope ~ condicion*as.factor(orden_bloque) + (1|nsub),
data = slopes_1k_clean)
# Get the summary of the model
summary(model_lmer_1k)
anova(model_lmer_1k)
# Fit a linear mixed-effects model with the
# interaction between "Order" and "condicion"
model_lmer_4k <- lmer(slope ~ condicion*as.factor(orden_bloque) + (1|nsub),
data = slopes_4k_clean)
# Get the summary of the model
summary(model_lmer_4k)
anova(model_lmer_4k)
# Fit a linear mixed-effects model with the
# interaction between "Order" and "condicion"
model_lmer_4k <- lmer(slope ~ condicion*orden_bloque + (1|nsub),
data = slopes_4k_clean)
# Get the summary of the model
summary(model_lmer_4k)
anova(model_lmer_4k)
View(data_clean)
View(data_slopes)
data_clean_1k <- data_clean %>% filter(freq=="1k")
lmer2.1k <- lmer(respuesta ~ condicion*distancia + (1|nsub), data=data_clean_1k)
summary(lmer2.1k)
anova(lmer2.1k)
data_clean_1k <- data_clean %>% filter(freq=="4k")
lmer2.1k <- lmer(respuesta ~ condicion*distancia + (1|nsub), data=data_clean_1k)
summary(lmer2.1k)
anova(lmer2.1k)
emmeans(lmer2.1k,
list(pairwise ~ condicion),
adjust="bonferroni")
emmeans(lmer2.1k,
list(pairwise ~ condicion*distancia),
adjust="bonferroni")
setwd("~/GitHub/Experimento_Distancia_LAPSo/Piloto_Mayo_Salta")
knitr::opts_chunk$set(echo = TRUE)
# library(readr)
library(data.table)
library(dplyr)
# library(here)
# library(ggplot2)
# library(plotrix)
# library(segmented)
library(Routliers)
library(tidyverse)
# library(ggpubr)
# library(car)
# library(lme4)
# library(nlme)
# library(emmeans)
# library(sjstats)
# library(lmerTest)
# library(MuMIn)
# library(nortest)
dir <- "./Data"
data <-
list.files(path=dir, pattern = "*.csv",full.names = TRUE) %>%
map_df(~fread(.) %>% mutate(trial_Order = row_number()))
rm(dir)
# Corregimos la columna de condicion con una etiqueta mas legible
# WW -> Sin filtro
# LL -> Filtro pasa-bajo
# HH -> Filtro pasa-alto
# HL
# LH
data$condicion[data$condicion==0] <- "WW"
data$condicion[data$condicion==1] <- "LL"
data$condicion[data$condicion==2] <- "HH"
data$condicion[data$condicion==3] <- "HL"
data$condicion[data$condicion==4] <- "LH"
data$distancia <- log(data$distancia)
data$respuesta <- log(data$respuesta)
View(data)
data <- data[!(data$nsub==19), ]
data_clean <- tibble()
Nsubs <- unique(data$nsub)
Conds <- unique(data$condicion)
for (N in Nsubs){
for (C in Conds){
data_N <- data %>% filter(nsub==N, condicion==C)
#print(N)
outliers_N <- outliers_mcd(x=cbind(data_N$distancia,data_N$respuesta))
outliers_list <- outliers_N$outliers_val
# Eliminar outliers multivariados!
outliers_index <-  which(data_N$distancia%in%outliers_list$X1 &
data_N$respuesta%in%outliers_list$X2)
if (length(outliers_index)!=0){
data_N <- data_N[-outliers_index, ]
}
data_clean <- rbind(data_clean,data_N)
}
}
rm(data_N,outliers_list,outliers_N,outliers_index,C,Conds,N,Nsubs)
data_slopes <- tibble()
sresids <- vector()
Nsubs <- unique(data_clean$nsub)
Conds <- unique(data_clean$condicion)
for (N in Nsubs){
for (C in Conds){
data_N <- data_clean %>% filter(nsub==N, condicion==C)
linear.model <- lm(respuesta~distancia,data_N)
data_N$slope <- linear.model$coefficients[2]
data_N$res <- as.vector(rstandard(linear.model))
data_slopes <- rbind(data_slopes,data_N)
sresids <- append(sresids, as.vector(rstandard(linear.model)))
}
}
rm(data_N,C,Conds,N,Nsubs, linear.model)
data_clean <- data_slopes
data_slopes <- data_slopes %>%
summarise(nsub, condicion, slope) %>%
unique()
slope_WW <- data_slopes %>% filter(condicion=="WW")
slope_LL <- data_slopes %>% filter(condicion=="LL")
slope_HH <- data_slopes %>% filter(condicion=="HH")
slope_HL <- data_slopes %>% filter(condicion=="HL")
slope_LH <- data_slopes %>% filter(condicion=="LH")
# Detecto outliers por condicion
outliers <-outliers_mad(slope_WW$slope)
#outliers$limits[2]
slope_WW<- slope_WW[slope_WW$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_LL$slope)
#outliers$limits[2]
slope_LL<- slope_LL[slope_LL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_HH$slope)
#outliers$limits[2]
slope_HH<- slope_HH[slope_HH$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_HL$slope)
#outliers$limits[2]
slope_HL<- slope_HL[slope_HL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_LH$slope)
#outliers$limits[2]
slope_LH<- slope_LH[slope_LH$slope<outliers$limits[2],]
# unifico
data_slopes_clean <- (rbind(slope_WW,slope_LL,slope_HH,
slope_HL,slope_LH))
count_conditions <- data_slopes_clean %>%
group_by(nsub) %>%
summarise(n = n())
drops <- count_conditions %>% subset(n!=5)
data_slopes_clean <- data_slopes_clean[!(data_slopes_clean$nsub%in%
drops$nsub), ]
rm(slope_1k_HH, slope_1k_LL,slope_1k_WW,
slope_4k_HH,slope_4k_LL,slope_4k_WW)
rm(outliers, count_conditions)
library(pwr)
calculate_cohens_d <- function(group1, group2) {
mean_diff <- mean(group1) - mean(group2)
pooled_sd <- sqrt(((sd(group1) ^ 2 + sd(group2) ^ 2) / 2))
cohend <- mean_diff / pooled_sd
return(cohend)
}
cohend <- calculate_cohens_d(
data_slopes_clean[data_slopes_clean$condicion=="WW",]$slope,
data_slopes_clean[data_slopes_clean$condicion=="HL",]$slope)
alpha <- 0.05
power <- 0.8
effect_size <- abs(cohend)
#effect_size <- 0.7
sz <- pwr.t.test(d = effect_size, sig.level = alpha, power = power)
sz
effect_size
library(pwr)
calculate_cohens_d <- function(group1, group2) {
mean_diff <- mean(group1) - mean(group2)
pooled_sd <- sqrt(((sd(group1) ^ 2 + sd(group2) ^ 2) / 2))
cohend <- mean_diff / pooled_sd
return(cohend)
}
cohend <- calculate_cohens_d(
data_slopes_clean[data_slopes_clean$condicion=="WW",]$slope,
data_slopes_clean[data_slopes_clean$condicion=="LH",]$slope)
alpha <- 0.05
power <- 0.8
effect_size <- abs(cohend)
#effect_size <- 0.7
sz <- pwr.t.test(d = effect_size, sig.level = alpha, power = power)
sz
effect_size
library(pwr)
calculate_cohens_d <- function(group1, group2) {
mean_diff <- mean(group1) - mean(group2)
pooled_sd <- sqrt(((sd(group1) ^ 2 + sd(group2) ^ 2) / 2))
cohend <- mean_diff / pooled_sd
return(cohend)
}
cohend <- calculate_cohens_d(
data_slopes_clean[data_slopes_clean$condicion=="WW",]$slope,
data_slopes_clean[data_slopes_clean$condicion=="HL",]$slope)
alpha <- 0.05
power <- 0.8
effect_size <- abs(cohend)
#effect_size <- 0.7
sz <- pwr.t.test(d = effect_size, sig.level = alpha, power = power)
sz
effect_size
library(pwr)
calculate_cohens_d <- function(group1, group2) {
mean_diff <- mean(group1) - mean(group2)
pooled_sd <- sqrt(((sd(group1) ^ 2 + sd(group2) ^ 2) / 2))
cohend <- mean_diff / pooled_sd
return(cohend)
}
cohend <- calculate_cohens_d(
data_slopes_clean[data_slopes_clean$condicion=="WW",]$slope,
data_slopes_clean[data_slopes_clean$condicion=="HL",]$slope)
alpha <- 0.05
power <- 0.8
#effect_size <- abs(cohend)
effect_size <- 0.7
sz <- pwr.t.test(d = effect_size, sig.level = alpha, power = power)
sz
library(pwr)
calculate_cohens_d <- function(group1, group2) {
mean_diff <- mean(group1) - mean(group2)
pooled_sd <- sqrt(((sd(group1) ^ 2 + sd(group2) ^ 2) / 2))
cohend <- mean_diff / pooled_sd
return(cohend)
}
cohend <- calculate_cohens_d(
data_slopes_clean[data_slopes_clean$condicion=="WW",]$slope,
data_slopes_clean[data_slopes_clean$condicion=="HL",]$slope)
alpha <- 0.05
power <- 0.8
#effect_size <- abs(cohend)
effect_size <- 0.5
sz <- pwr.t.test(d = effect_size, sig.level = alpha, power = power)
sz
library(pwr)
calculate_cohens_d <- function(group1, group2) {
mean_diff <- mean(group1) - mean(group2)
pooled_sd <- sqrt(((sd(group1) ^ 2 + sd(group2) ^ 2) / 2))
cohend <- mean_diff / pooled_sd
return(cohend)
}
cohend <- calculate_cohens_d(
data_slopes_clean[data_slopes_clean$condicion=="WW",]$slope,
data_slopes_clean[data_slopes_clean$condicion=="HL",]$slope)
alpha <- 0.05
power <- 0.8
#effect_size <- abs(cohend)
effect_size <- 0.6
sz <- pwr.t.test(d = effect_size, sig.level = alpha, power = power)
sz
library(pwr)
calculate_cohens_d <- function(group1, group2) {
mean_diff <- mean(group1) - mean(group2)
pooled_sd <- sqrt(((sd(group1) ^ 2 + sd(group2) ^ 2) / 2))
cohend <- mean_diff / pooled_sd
return(cohend)
}
cohend <- calculate_cohens_d(
data_slopes_clean[data_slopes_clean$condicion=="WW",]$slope,
data_slopes_clean[data_slopes_clean$condicion=="HL",]$slope)
alpha <- 0.05
power <- 0.8
#effect_size <- abs(cohend)
effect_size <- 0.5
sz <- pwr.t.test(d = effect_size, sig.level = alpha, power = power)
sz
