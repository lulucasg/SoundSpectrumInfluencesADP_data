r2[1], r2[2]
))
# Modelo
modelo <- lmer(slope ~ condicion + (1|nsub),
data = data_slopes_clean %>% filter(freq=="1k"))
# ANOVA
anova_res <- anova(modelo)
eta_sq <- effectsize::eta_squared(modelo)
# EMMs con Bonferroni
emms <- emmeans(modelo, pairwise ~ condicion, adjust = "bonferroni")
# R² Marginal y Condicional
r2 <- r.squaredGLMM(modelo)
# Shapiro-Wilk para residuos
shapiro <- shapiro.test(residuals(modelo))
# Resumen de las comparaciones post-hoc
contrasts_table <- summary(emms$contrasts)  # Resumen de las comparaciones
# Accede a los resultados específicos de la primera comparación
contrast_result <- contrasts_table[1,]  # Obtén la primera fila de los contrastes
# Imprimir resultados detallados en consola
print(sprintf(
"Linear mixed-effects models revealed a significant effect of condition on [dependent variable] (F(%.0f, %.0f) = %.2f, p = %.3f, η² = %.3f). Post-hoc pairwise comparisons with Bonferroni correction indicated significant differences between %s and %s (ΔM = %.2f, 95%% CI [%.2f, %.2f], p = %.3f). Model fit was assessed with marginal R² = %.3f and conditional R² = %.3f.",
anova_res$Df[1], anova_res$Df[2], anova_res$`F value`[1], anova_res$`Pr(>F)`[1], eta_sq$Eta2_partial[1],
contrast_result$contrast[1], contrast_result$contrast[2], contrast_result$estimate,
contrast_result$conf.low, contrast_result$conf.high, contrast_result$p.value,
r2[1], r2[2]
))
sprintf(
"Linear mixed-effects models revealed a significant effect of condition on [dependent variable] (F(%.0f, %.0f) = %.2f, p = %.3f, η² = %.3f). Post-hoc pairwise comparisons with Bonferroni correction indicated significant differences between %s and %s (ΔM = %.2f, 95%% CI [%.2f, %.2f], p = %.3f). Model fit was assessed with marginal R² = %.3f and conditional R² = %.3f.",
anova_res$Df[1], anova_res$Df[2], anova_res$`F value`[1], anova_res$`Pr(>F)`[1], eta_sq$Eta2_partial[1],
contrast_result$contrast[1], contrast_result$contrast[2], contrast_result$estimate,
contrast_result$conf.low, contrast_result$conf.high, contrast_result$p.value,
r2[1], r2[2]
)
sprintf(
"Linear mixed-effects models revealed a significant effect of condition on [dependent variable] (F(%.0f, %.0f) = %.2f, p = %.3f, η² = %.3f). Post-hoc pairwise comparisons with Bonferroni correction indicated significant differences between %s and %s (ΔM = %.2f, 95%% CI [%.2f, %.2f], p = %.3f). Model fit was assessed with marginal R² = %.3f and conditional R² = %.3f."
emms$contrasts$condicion)
sprintf(
"Linear mixed-effects models revealed a significant effect of condition on [dependent variable] (F(%.0f, %.0f) = %.2f, p = %.3f, η² = %.3f). Post-hoc pairwise comparisons with Bonferroni correction indicated significant differences between %s and %s (ΔM = %.2f, 95%% CI [%.2f, %.2f], p = %.3f). Model fit was assessed with marginal R² = %.3f and conditional R² = %.3f."
)
sprintf(
"Linear mixed-effects models revealed a significant effect of condition on [dependent variable] (F(%.0f, %.0f) = %.2f, p = %.3f, η² = %.3f). Post-hoc pairwise comparisons with Bonferroni correction indicated significant differences between %s and %s (ΔM = %.2f, 95%% CI [%.2f, %.2f], p = %.3f). Model fit was assessed with marginal R² = %.3f and conditional R² = %.3f.",
anova_res$Df[1], anova_res$Df[2], anova_res$`F value`[1], anova_res$`Pr(>F)`[1], eta_sq$Eta2_partial[1],
contrast_result$contrast[1], contrast_result$contrast[2], contrast_result$estimate,
contrast_result$conf.low, contrast_result$conf.high, contrast_result$p.value,
r2[1], r2[2]
)
contrast_result$contrast[1]
contrast_result$contrast[2]
contrast_result$estimate
r2[1]
eta_sq$Eta2_partial[1]
# Modelo
modelo <- lmer(slope ~ condicion + (1|nsub),
data = data_slopes_clean %>% filter(freq=="1k"))
# Realizar la ANOVA
anova_res <- anova(modelo)
eta_sq <- eta_squared(modelo)
# Modelo
modelo <- lmer(slope ~ condicion + (1|nsub),
data = data_slopes_clean %>% filter(freq=="1k"))
# Realizar la ANOVA
anova_res <- anova(modelo)
eta_sq <- effectsize::eta_squared(modelo)
# Estimar las medias marginales y realizar las comparaciones post-hoc con corrección de Bonferroni
emms <- emmeans(modelo, pairwise ~ condicion, adjust = "bonferroni")
# Obtener los contrastes de las comparaciones post-hoc
contrasts_table <- summary(emms$contrasts)  # Resumen de las comparaciones post-hoc
# Ver los contrastes completos
print(contrasts_table)
# Si deseas acceder a una fila en particular de las comparaciones:
# Por ejemplo, la primera comparación
contrast_result <- contrasts_table[1,]  # Obtén la primera fila de las comparaciones
# Imprimir resultados formateados
cat(sprintf(
"Linear mixed-effects models revealed a significant effect of condition on [dependent variable] (F(%.0f, %.0f) = %.2f, p = %.3f, η² = %.3f). \n",
anova_res$Df[1], anova_res$Df[2], anova_res$`F value`[1], anova_res$`Pr(>F)`[1], eta_sq$Eta2_partial[1]
))
# Imprimir las comparaciones post-hoc
cat(sprintf(
"Post-hoc pairwise comparisons with Bonferroni correction indicated significant differences between %s and %s (ΔM = %.2f, 95%% CI [%.2f, %.2f], p = %.3f).\n",
contrast_result$contrast[1], contrast_result$contrast[2], contrast_result$estimate,
contrast_result$conf.low, contrast_result$conf.high, contrast_result$p.value
))
# Imprimir R² marginal y condicional
r2 <- r.squaredGLMM(modelo)
cat(sprintf("Model fit was assessed with marginal R² = %.3f and conditional R² = %.3f.\n", r2[1], r2[2]))
cat(sprintf(
"Linear mixed-effects models revealed a significant effect of condition on [dependent variable] (F(%.0f, %.0f) = %.2f, p = %.3f, η² = %.3f). \n",
anova_res$Df[1], anova_res$Df[2], anova_res$`F value`[1], anova_res$`Pr(>F)`[1], eta_sq$Eta2_partial[1]
))
r2 <- r.squaredGLMM(modelo)
cat(sprintf("Model fit was assessed with marginal R² = %.3f and conditional R² = %.3f.\n", r2[1], r2[2]))
cat(sprintf(
"Post-hoc pairwise comparisons with Bonferroni correction indicated significant differences between %s and %s (ΔM = %.2f, 95%% CI [%.2f, %.2f], p = %.3f).\n",
contrast_result$contrast[1], contrast_result$contrast[2], contrast_result$estimate,
contrast_result$conf.low, contrast_result$conf.high, contrast_result$p.value
))
cat(sprintf(
"Linear mixed-effects models revealed a significant effect of condition on [dependent variable] (F(%.0f, %.0f) = %.2f, p = %.3f, η² = %.3f). \n",
anova_res$Df[1], anova_res$Df[2], anova_res$`F value`[1], anova_res$`Pr(>F)`[1], eta_sq$Eta2_partial[1]
))
# Modelo
modelo <- lmer(slope ~ condicion + (1|nsub),
data = data_slopes_clean %>% filter(freq=="1k"))
# Realizar la ANOVA
anova_res <- anova(modelo)
eta_sq <- effectsize::eta_squared(modelo)
# Estimar las medias marginales y realizar las comparaciones post-hoc con corrección de Bonferroni
emms <- emmeans(modelo, pairwise ~ condicion, adjust = "bonferroni")
# Obtener los contrastes de las comparaciones post-hoc
contrasts_table <- summary(emms$contrasts)  # Resumen de las comparaciones post-hoc
# Ver todos los contrastes
print("Resumen de las comparaciones post-hoc:")
print(contrasts_table)
# Si deseas acceder a una fila en particular de las comparaciones:
# Por ejemplo, la primera comparación
contrast_result <- contrasts_table[1,]  # Obtén la primera fila de las comparaciones
# Imprimir resultados formateados
cat("Resultado del modelo de efectos mixtos:\n")
cat(sprintf(
"Linear mixed-effects models revealed a significant effect of condition on [dependent variable] (F(%.0f, %.0f) = %.2f, p = %.3f, η² = %.3f). \n",
anova_res$Df[1], anova_res$Df[2], anova_res$`F value`[1], anova_res$`Pr(>F)`[1], eta_sq$Eta2_partial[1]
))
# Imprimir las comparaciones post-hoc
cat("Comparaciones post-hoc ajustadas con Bonferroni:\n")
cat(sprintf(
"Post-hoc pairwise comparisons with Bonferroni correction indicated significant differences between %s and %s (ΔM = %.2f, 95%% CI [%.2f, %.2f], p = %.3f).\n",
contrast_result$contrast[1], contrast_result$contrast[2], contrast_result$estimate,
contrast_result$conf.low, contrast_result$conf.high, contrast_result$p.value
))
# Imprimir R² marginal y condicional
r2 <- r.squaredGLMM(modelo)
cat(sprintf("Model fit was assessed with marginal R² = %.3f and conditional R² = %.3f.\n", r2[1], r2[2]))
cat("Comparaciones post-hoc ajustadas con Bonferroni:\n")
cat(sprintf(
"Post-hoc pairwise comparisons with Bonferroni correction indicated significant differences between %s and %s (ΔM = %.2f, 95%% CI [%.2f, %.2f], p = %.3f).\n",
contrast_result$contrast[1], contrast_result$contrast[2], contrast_result$estimate,
contrast_result$conf.low, contrast_result$conf.high, contrast_result$p.value
))
anova_res$Df[1]
anova_res$Df[2]
anova_res$`F value`[1]
anova_res$`Pr(>F)`[1]
eta_sq$Eta2_partial[1]
anova_res
# Modelo
modelo <- lmer(slope ~ condicion + (1|nsub),
data = data_slopes_clean %>% filter(freq=="1k"))
# Realizar la ANOVA
anova_res <- anova(modelo)
eta_sq <- effectsize::eta_squared(modelo)
# Estimar las medias marginales y realizar las comparaciones post-hoc con corrección de Bonferroni
emms <- emmeans(modelo, pairwise ~ condicion, adjust = "bonferroni")
# Obtener los contrastes de las comparaciones post-hoc
contrasts_table <- summary(emms$contrasts)  # Resumen de las comparaciones post-hoc
# Obtener los valores de la ANOVA
f_value <- anova_res$`F value`[1]
p_value <- anova_res$`Pr(>F)`[1]
eta_sq <- eta_squared(modelo)$Eta2_partial[1]
# Modelo
modelo <- lmer(slope ~ condicion + (1|nsub),
data = data_slopes_clean %>% filter(freq=="1k"))
# Realizar la ANOVA
anova_res <- anova(modelo)
eta_sq <- effectsize::eta_squared(modelo)
# Estimar las medias marginales y realizar las comparaciones post-hoc con corrección de Bonferroni
emms <- emmeans(modelo, pairwise ~ condicion, adjust = "bonferroni")
# Obtener los contrastes de las comparaciones post-hoc
contrasts_table <- summary(emms$contrasts)  # Resumen de las comparaciones post-hoc
# Obtener los valores de la ANOVA
f_value <- anova_res$`F value`[1]
p_value <- anova_res$`Pr(>F)`[1]
eta_sq <- effectsize::eta_squared(modelo)$Eta2_partial[1]
# Obtener los valores de las comparaciones post-hoc
# Imprimir los resultados de las comparaciones post-hoc a mano
cat("Valores de comparaciones post-hoc:\n")
print(contrasts_table)  # Imprime la tabla completa de las comparaciones post-hoc
# Imprimir solo los valores principales de la ANOVA
cat(sprintf("F value: %.2f\n", f_value))
cat(sprintf("p value: %.3f\n", p_value))
cat(sprintf("Eta squared (η²): %.3f\n", eta_sq))
# Si necesitas los valores de las comparaciones post-hoc, puedes extraerlos manualmente de la tabla.
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(here)
library(ggplot2)
library(plotrix)
library(segmented)
library(Routliers)
library(tidyverse)
library(ggpubr)
library(car)
library(data.table)
library(lme4)
library(nlme)
library(emmeans)
library(sjstats)
library(lmerTest)
library(MuMIn)
library(nortest)
dir_1k_DR <- "./Data_1k_DR"
data_1k_DR <-
list.files(path=dir_1k_DR, pattern = "*.csv",full.names = TRUE) %>%
map_df(~fread(.) %>% mutate(trial_Order = row_number())) %>%
mutate(freq = "1k")
rm(dir_1k_DR)
# Corregimos la columna de condicion con una etiqueta mas legible
data_1k_DR$condicion[data_1k_DR$condicion==0] <- "WW"
data_1k_DR$condicion[data_1k_DR$condicion==1] <- "LL"
data_1k_DR$condicion[data_1k_DR$condicion==2] <- "LW"
data_1k_DR$condicion[data_1k_DR$condicion==3] <- "WL"
orden_bloques <- read.csv("./orden_bloques.csv")
data_1k_DR <- merge(x=orden_bloques,y=data_1k_DR,
by=c("nsub","condicion"))
# Erase redundant columns
data_1k_DR <- data_1k_DR[, !names(data_1k_DR) %in% c("bloque","altura")]
rm(orden_bloques)
data_1k_DR <- data_1k_DR[!(data_1k_DR$nsub %in% c(4,55,56,69)), ]
data_1k_DR$dist_log <- log10(data_1k_DR$distancia)
data_1k_DR$resp_log <- log10(data_1k_DR$respuesta)
data_clean <- tibble()
Nsubs <- unique(data_1k_DR$nsub)
Conds <- unique(data_1k_DR$condicion)
for (N in Nsubs){
for (C in Conds){
data_N <- data_1k_DR %>% filter(nsub==N, condicion==C)
outliers_N <- outliers_mcd(x = cbind(data_N$dist_log,data_N$resp_log), alpha = .01, h=0.75)
outliers_list <- outliers_N$outliers_val
# Eliminar outliers multivariados!
outliers_index <-  which(data_N$dist_log%in%outliers_list$X1 &
data_N$resp_log%in%outliers_list$X2)
if (length(outliers_index)!=0){
data_N <- data_N[-outliers_index, ]
}
data_clean <- rbind(data_clean,data_N)
}
}
rm(data_N,outliers_list,outliers_N,outliers_index,C,Conds,N,Nsubs)
data_slopes <- tibble()
sresids <- vector()
Nsubs <- unique(data_clean$nsub)
Conds <- unique(data_clean$condicion)
for (N in Nsubs){
for (C in Conds){
data_N <- data_clean %>% filter(nsub==N, condicion==C)
linear.model <- lm(resp_log~dist_log,data_N)
data_N$slope <- linear.model$coefficients[2]
data_N$intercept <- linear.model$coefficients[1]
data_N$res <- as.vector(rstandard(linear.model))
data_slopes <- rbind(data_slopes,data_N)
sresids <- append(sresids, as.vector(rstandard(linear.model)))
}
}
rm(data_N,C,Conds,N,Nsubs, linear.model)
data_clean <- data_slopes
data_slopes <- data_slopes %>%
summarise(nsub, condicion, orden_bloque, slope, intercept, freq) %>%
unique()
# Histogram & QQ Plot
hist(sresids, col='steelblue', main='Residues',xlab="Residues")
qqnorm(sresids, main='Normal')
qqline(sresids)
normality_test <- data_clean %>%
group_by(nsub, condicion) %>%
summarise(statistic = shapiro.test(res)$statistic,
p.value = shapiro.test(res)$p.value)
normality_test%>%subset(p.value<0.05)
## residuos ploteados en dos ejes, para poder ver la variabilidad por
## distancia por condicion por frecuencia.6 figuras en total
cols <- c("#455A64", "#90A4AE", "#CFD8DC",  "#676c6e")
cols <- c("#00AF55", "#EF0000", "#FF8F20","#FFFF00")
ggplot(data_clean, aes(x = res, fill = condicion)) +
geom_histogram(binwidth = 0.2) +
scale_fill_manual(values = cols,
limits = c('WW', 'LL', 'WL', 'LW'),
labels = c('Wide', 'Low', 'Wide-Low', 'Low-Wide'),
guide = guide_none()) + # Para ocultar las etiquetas de la leyenda
labs(y = 'Count', x = "Residuals") +  # Para quitar las etiquetas del eje y
labs(title = 'Residuals by condition') +  # Para quitar el título de los gráficos facetados
facet_wrap(~condicion, labeller = "label_value") +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 15, hjust = 0.5))
slope_1k_WW <- data_slopes %>% filter(condicion=="WW")
slope_1k_LL <- data_slopes %>% filter(condicion=="LL")
slope_1k_WL <- data_slopes %>% filter(condicion=="WL")
slope_1k_LW <- data_slopes %>% filter(condicion=="LW")
# 1k
outliers <-outliers_mad(slope_1k_WW$slope)
#outliers$limits[2]
slope_1k_WW<- slope_1k_WW[slope_1k_WW$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_LL$slope)
#outliers$limits[2]
slope_1k_LL<- slope_1k_LL[slope_1k_LL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_WL$slope)
#outliers$limits[2]
slope_1k_WL<- slope_1k_WL[slope_1k_WL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_LW$slope)
#outliers$limits[2]
slope_1k_LW<- slope_1k_LW[slope_1k_LW$slope<outliers$limits[2],]
data_slopes_clean <- (rbind(slope_1k_LL,slope_1k_WW,
slope_1k_LW,slope_1k_WL))
count_conditions <- data_slopes_clean %>%
group_by(nsub) %>%
summarise(n = n())
drops <- count_conditions %>% subset(n!=4)
data_slopes_clean <- data_slopes_clean[!(data_slopes_clean$nsub%in%
drops$nsub), ]
data_clean <- data_clean[!(data_clean$nsub%in%
drops$nsub), ]
rm(count_conditions, outliers)
rm(slope_1k_LL, slope_1k_WW, slope_1k_LW, slope_1k_WL)
normality_slopes <- data_slopes_clean %>%
group_by(freq, condicion) %>%
summarise(statistic = shapiro.test(slope)$statistic,
p.value = shapiro.test(slope)$p.value,
normality=(p.value>0.05))
normality_slopes
#cols <- c("#505160", "#68829E", "#AEBD38", "#598234")
#cols <- c("#2E2300", "#6E6702", "#C05805", "#DB9501")
#cols <- c("#00AF55", "#EF0000", "#EE8E20","#DDDD00")
cols <- c("#00AF55", "#EF0000", "#DB9501","#890070")
plt_exp2_slope <- ggplot(data_slopes_clean,
aes(x=condicion, y=slope, fill=condicion)) +
stat_boxplot(geom = "errorbar",
width = 0.25) +
geom_boxplot(alpha=0.8, outlier.colour=NA, width = 0.4)+
scale_fill_manual(values = cols,
limits = c('WW', 'LL', 'WL', 'LW'),
labels = c('Wide', 'Low', 'Wide-Low', 'Low-Wide'),
guide = guide_none()
) +
scale_y_continuous(limits=c(0, 2.20)) +
scale_x_discrete(limits = c('WW', 'LL', 'WL', 'LW'),
labels = c('Wide', 'Low', 'Wide-Low', 'Low-Wide')
) +
labs(title="Slopes per condition", y='Slopes', x='Condition')+
# WW- LW
annotate("text", x = 2.5, y = 2.18,  label = "***", size = 5) +
annotate("segment", x = 0.9, xend = 4.1, y = 2.16,
yend = 2.16, colour = "black", size=.2, alpha=1,) +
# LL - LW
annotate("text", x = 3, y = 2.08,  label = "***", size = 5) +
annotate("segment", x = 1.9, xend = 4.1, y = 2.06,
yend = 2.06, colour = "black", size=.2, alpha=1,) +
# WW- WL
annotate("text", x = 2.0, y = 1.98,  label = "***", size = 5) +
annotate("segment", x = 0.9, xend = 3.1, y = 1.96,
yend = 1.96, colour = "black", size=.2, alpha=1,) +
# LL - WL
annotate("text", x = 2.5, y = 1.88,  label = "***", size = 5) +
annotate("segment", x = 1.9, xend = 3.1, y = 1.86,
yend = 1.86, colour = "black", size=.2, alpha=1,) +
#WW - LL
annotate("text", x = 1.5, y = 1.78,  label = "***", size = 5) +
annotate("segment", x = 0.9, xend = 2.1, y = 1.76,
yend = 1.76, colour = "black", size=.2, alpha=1,) +
theme_bw()+
theme(axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12, hjust = 0.5))
plt_exp2_slope
ggsave(plot = last_plot(),
file = "boxplot_exp2.eps",
device = cairo_ps,
width = 1320,
height = 1100,
unit = "px",
dpi = 300)
ggplot(data_clean %>% filter(nsub < 15), aes(x=dist_log, y=resp_log, color=condicion)) +
scale_color_manual(values = cols, labels = c('Wide', 'Low', 'Wide-Low', 'Low-Wide')) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5)) +
theme_minimal()
ggplot(data_clean %>% filter(nsub > 15 & nsub < 31), aes(x=dist_log, y=resp_log, color=condicion)) +
scale_color_manual(values = cols, labels = c('Wide', 'Low', 'Wide-Low', 'Low-Wide')) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5)) +
theme_minimal()
ggplot(data_clean %>% filter(nsub > 31 & nsub < 44), aes(x=dist_log, y=resp_log, color=condicion)) +
scale_color_manual(values = cols, labels = c('Wide', 'Low', 'Wide-Low', 'Low-Wide')) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5)) +
theme_minimal()
ggplot(data_clean %>% filter(nsub > 44 & nsub < 59), aes(x=dist_log, y=resp_log, color=condicion)) +
scale_color_manual(values = cols, labels = c('Wide', 'Low', 'Wide-Low', 'Low-Wide')) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5)) +
theme_minimal()
ggplot(data_clean %>% filter(nsub > 59 & nsub < 70), aes(x=dist_log, y=resp_log, color=condicion)) +
scale_color_manual(values = cols, labels = c('Wide', 'Low', 'Wide-Low', 'Low-Wide')) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5)) +
theme_minimal()
cols <- c("#00AF55", "#EF0000", "#DB9501","#890070")
data_prom <- data_clean %>%
group_by(condicion, dist_log) %>%
summarise(dist_log,
resp_log,
prom_log = mean(resp_log),
sd_log = sd(resp_log),
std_log = std.error(resp_log))
ggplot(data_prom,
aes(x=dist_log, y=prom_log,
color = condicion)) +
geom_point(alpha = 0.8) +
geom_line(linewidth = 0.6,alpha = 0.85) +
scale_x_continuous(breaks=log10(c(1.5,2,2.5,3.3,4.3,5.6,7.2,9.4,12,15.5,20,26)),
labels=c(1.5,2,2.5,3.3,4.3,5.6,7.2,9.4,12,15.5,20,26))+
scale_y_continuous(breaks=log10(c(0.7,1,1.5,2,2.5,3.3,4.3,5.6,7.2,9.4,12,15.5,20,26)),
labels=c(0.7,1,1.5,2,2.5,3.3,4.3,5.6,7.2,9.4,12,15.5,20,26)
#limits=c(-0.2,1.367)
)+
coord_cartesian(ylim = c(-0.2,1.367)) +
scale_color_manual(values = cols,
limits = c('WW', 'LL', 'WL', 'LW'),
labels = c('Wide', 'Low', 'Wide-Low', 'Low-Wide'),
) +
geom_errorbar(aes(ymin=prom_log-std_log,
ymax=prom_log+std_log),
width = 0.02,alpha = 0.8) +
# facet_grid(rows = vars(ID)) +
labs(title = "Average Responses", x='Distance [log(m)]', y='Responses [log(m)]', color ="Condition") +
theme_bw()+
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
plot.title = element_text(size = 12, hjust = 0.5)
)
ggsave(plot = last_plot(),
file = "dist_curves_exp2.eps",
device = cairo_ps,
width = 1800,
height = 1200,
unit = "px",
dpi = 300)
lmer.1k <- lmer(slope ~ condicion + (1|nsub),
data = data_slopes_clean)
summary(lmer.1k)
anova(lmer.1k)
##partial eta sq
effectsize::eta_squared(lmer.1k, partial = TRUE)
#Rsq
r.squaredGLMM(lmer.1k)
emmeans(lmer.1k,
list(pairwise ~ condicion),
adjust="bonferroni")
qqnorm(resid(lmer.1k))
lmer.1k <- lmer(slope ~ condicion + (1|nsub),
data = data_slopes_clean)
summary(lmer.1k)
anova(lmer.1k)
##partial eta sq
effectsize::eta_squared(lmer.1k, partial = TRUE)
#Rsq
r.squaredGLMM(lmer.1k)
emmeans(lmer.1k,
list(pairwise ~ condicion),
adjust="bonferroni")
qqnorm(resid(lmer.1k))
# Datos
df <- 186
estimate <- c(-0.2835 , -0.2346, -0.4937, 0.0488, -0.2103, -0.2591)
SE <- c(0.0349 , 0.0349 , 0.0349 ,0.0349 ,0.0349 ,0.0349 )
# Valor t para 95% CI
t <- qt(0.975, df)
# Cálculo del intervalo de confianza
lower <- estimate - t * SE
upper <- estimate + t * SE
# Resultados
CI <- data.frame(Comparison = c("HH - LL", "HH - WW", "LL - WW"),
Estimate = estimate,
Lower = lower,
Upper = upper)
print(CI)
# Datos
df <- 186
estimate <- c(-0.2835 , -0.2346, -0.4937, 0.0488, -0.2103, -0.2591)
SE <- c(0.0349 , 0.0349 , 0.0349 ,0.0349 ,0.0349 ,0.0349 )
# Valor t para 95% CI
t <- qt(0.975, df)
# Cálculo del intervalo de confianza
lower <- estimate - t * SE
upper <- estimate + t * SE
# Resultados
CI <- data.frame(Comparison = c("LL - LW", "LL - WL", "LL - WW",
"LW - WL", "LW - WW", "WL - WW"),
Estimate = estimate,
Lower = lower,
Upper = upper)
print(CI)
